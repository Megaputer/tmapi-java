/*
 * Megaputer Text Mining API
 * Megaputer Text Mining API
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package tmapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import tmapi.model.KeywordsResponsePositions;

/**
 * KeywordsResponseKeywords
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2019-12-20T13:29:48.384+03:00[Europe/Moscow]")
public class KeywordsResponseKeywords {
  public static final String SERIALIZED_NAME_KEYWORD = "keyword";
  @SerializedName(SERIALIZED_NAME_KEYWORD)
  private String keyword;

  public static final String SERIALIZED_NAME_NEGATED = "negated";
  @SerializedName(SERIALIZED_NAME_NEGATED)
  private Boolean negated;

  /**
   * Part of speech of the keyword
   */
  @JsonAdapter(PartOfSpeechEnum.Adapter.class)
  public enum PartOfSpeechEnum {
    NOUN("Noun"),
    
    VERB("Verb"),
    
    ADVERB("Adverb"),
    
    ADJECTIVE("Adjective");

    private String value;

    PartOfSpeechEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PartOfSpeechEnum fromValue(String text) {
      for (PartOfSpeechEnum b : PartOfSpeechEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + text + "'");
    }

    public static class Adapter extends TypeAdapter<PartOfSpeechEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PartOfSpeechEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PartOfSpeechEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PartOfSpeechEnum.fromValue(String.valueOf(value));
      }
    }
  }

  public static final String SERIALIZED_NAME_PART_OF_SPEECH = "partOfSpeech";
  @SerializedName(SERIALIZED_NAME_PART_OF_SPEECH)
  private PartOfSpeechEnum partOfSpeech;

  public static final String SERIALIZED_NAME_SIGNIFICANCE = "significance";
  @SerializedName(SERIALIZED_NAME_SIGNIFICANCE)
  private BigDecimal significance;

  public static final String SERIALIZED_NAME_SUPPORT = "support";
  @SerializedName(SERIALIZED_NAME_SUPPORT)
  private Integer support;

  public static final String SERIALIZED_NAME_FREQUENCY = "frequency";
  @SerializedName(SERIALIZED_NAME_FREQUENCY)
  private Integer frequency;

  public static final String SERIALIZED_NAME_POSITIONS = "positions";
  @SerializedName(SERIALIZED_NAME_POSITIONS)
  private List<KeywordsResponsePositions> positions = null;

  public KeywordsResponseKeywords keyword(String keyword) {
    this.keyword = keyword;
    return this;
  }

   /**
   * Normalized keyword
   * @return keyword
  **/
  @ApiModelProperty(example = "corn", value = "Normalized keyword")
  public String getKeyword() {
    return keyword;
  }

  public void setKeyword(String keyword) {
    this.keyword = keyword;
  }

  public KeywordsResponseKeywords negated(Boolean negated) {
    this.negated = negated;
    return this;
  }

   /**
   * Indicates negation in the semantics of the word and returns the boolean values
   * @return negated
  **/
  @ApiModelProperty(value = "Indicates negation in the semantics of the word and returns the boolean values")
  public Boolean getNegated() {
    return negated;
  }

  public void setNegated(Boolean negated) {
    this.negated = negated;
  }

  public KeywordsResponseKeywords partOfSpeech(PartOfSpeechEnum partOfSpeech) {
    this.partOfSpeech = partOfSpeech;
    return this;
  }

   /**
   * Part of speech of the keyword
   * @return partOfSpeech
  **/
  @ApiModelProperty(example = "Noun", value = "Part of speech of the keyword")
  public PartOfSpeechEnum getPartOfSpeech() {
    return partOfSpeech;
  }

  public void setPartOfSpeech(PartOfSpeechEnum partOfSpeech) {
    this.partOfSpeech = partOfSpeech;
  }

  public KeywordsResponseKeywords significance(BigDecimal significance) {
    this.significance = significance;
    return this;
  }

   /**
   * How distinct a particular keyword is for the explored text. Significance is calculated on a scale of 0,00 to 100,00. The greater the significance, the greater the chance that the concepts in the investigated data revolve around such a word. 
   * @return significance
  **/
  @ApiModelProperty(example = "100", value = "How distinct a particular keyword is for the explored text. Significance is calculated on a scale of 0,00 to 100,00. The greater the significance, the greater the chance that the concepts in the investigated data revolve around such a word. ")
  public BigDecimal getSignificance() {
    return significance;
  }

  public void setSignificance(BigDecimal significance) {
    this.significance = significance;
  }

  public KeywordsResponseKeywords support(Integer support) {
    this.support = support;
    return this;
  }

   /**
   * The number of different records containing the keyword
   * @return support
  **/
  @ApiModelProperty(example = "1", value = "The number of different records containing the keyword")
  public Integer getSupport() {
    return support;
  }

  public void setSupport(Integer support) {
    this.support = support;
  }

  public KeywordsResponseKeywords frequency(Integer frequency) {
    this.frequency = frequency;
    return this;
  }

   /**
   * The number of times the keyword appears in the data
   * @return frequency
  **/
  @ApiModelProperty(example = "1", value = "The number of times the keyword appears in the data")
  public Integer getFrequency() {
    return frequency;
  }

  public void setFrequency(Integer frequency) {
    this.frequency = frequency;
  }

  public KeywordsResponseKeywords positions(List<KeywordsResponsePositions> positions) {
    this.positions = positions;
    return this;
  }

  public KeywordsResponseKeywords addPositionsItem(KeywordsResponsePositions positionsItem) {
    if (this.positions == null) {
      this.positions = new ArrayList<KeywordsResponsePositions>();
    }
    this.positions.add(positionsItem);
    return this;
  }

   /**
   * Keyword positions in text
   * @return positions
  **/
  @ApiModelProperty(value = "Keyword positions in text")
  public List<KeywordsResponsePositions> getPositions() {
    return positions;
  }

  public void setPositions(List<KeywordsResponsePositions> positions) {
    this.positions = positions;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeywordsResponseKeywords keywordsResponseKeywords = (KeywordsResponseKeywords) o;
    return Objects.equals(this.keyword, keywordsResponseKeywords.keyword) &&
        Objects.equals(this.negated, keywordsResponseKeywords.negated) &&
        Objects.equals(this.partOfSpeech, keywordsResponseKeywords.partOfSpeech) &&
        Objects.equals(this.significance, keywordsResponseKeywords.significance) &&
        Objects.equals(this.support, keywordsResponseKeywords.support) &&
        Objects.equals(this.frequency, keywordsResponseKeywords.frequency) &&
        Objects.equals(this.positions, keywordsResponseKeywords.positions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(keyword, negated, partOfSpeech, significance, support, frequency, positions);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeywordsResponseKeywords {\n");
    
    sb.append("    keyword: ").append(toIndentedString(keyword)).append("\n");
    sb.append("    negated: ").append(toIndentedString(negated)).append("\n");
    sb.append("    partOfSpeech: ").append(toIndentedString(partOfSpeech)).append("\n");
    sb.append("    significance: ").append(toIndentedString(significance)).append("\n");
    sb.append("    support: ").append(toIndentedString(support)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    positions: ").append(toIndentedString(positions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

